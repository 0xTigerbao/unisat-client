/* tslint:disable */
/* eslint-disable */
/**
 * UniSat Wallet - OpenAPI
 * This is UniSat Wallet Open API. If you wish to use the OpenAPI, please feel free to send us an email, and we will provide you with an API KEY.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@unisat.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse2004 } from '../models';
import { InlineResponse2005 } from '../models';
/**
 * BlocksApi - axios parameter creator
 * @export
 */
export const BlocksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get tx history by block height.
         * @param {number} height Block height
         * @param {number} cursor Start offset
         * @param {number} size Number of items returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerBlockHeightTxsGet: async (height: number, cursor: number, size: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError('height','Required parameter height was null or undefined when calling v1IndexerBlockHeightTxsGet.');
            }
            // verify required parameter 'cursor' is not null or undefined
            if (cursor === null || cursor === undefined) {
                throw new RequiredError('cursor','Required parameter cursor was null or undefined when calling v1IndexerBlockHeightTxsGet.');
            }
            // verify required parameter 'size' is not null or undefined
            if (size === null || size === undefined) {
                throw new RequiredError('size','Required parameter size was null or undefined when calling v1IndexerBlockHeightTxsGet.');
            }
            const localVarPath = `/v1/indexer/block/{height}/txs`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get blockchain info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerBlockchainInfoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/indexer/blockchain/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlocksApi - functional programming interface
 * @export
 */
export const BlocksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get tx history by block height.
         * @param {number} height Block height
         * @param {number} cursor Start offset
         * @param {number} size Number of items returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBlockHeightTxsGet(height: number, cursor: number, size: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2005>>> {
            const localVarAxiosArgs = await BlocksApiAxiosParamCreator(configuration).v1IndexerBlockHeightTxsGet(height, cursor, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get blockchain info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBlockchainInfoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {
            const localVarAxiosArgs = await BlocksApiAxiosParamCreator(configuration).v1IndexerBlockchainInfoGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BlocksApi - factory interface
 * @export
 */
export const BlocksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get tx history by block height.
         * @param {number} height Block height
         * @param {number} cursor Start offset
         * @param {number} size Number of items returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBlockHeightTxsGet(height: number, cursor: number, size: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2005>> {
            return BlocksApiFp(configuration).v1IndexerBlockHeightTxsGet(height, cursor, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get blockchain info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBlockchainInfoGet(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {
            return BlocksApiFp(configuration).v1IndexerBlockchainInfoGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlocksApi - object-oriented interface
 * @export
 * @class BlocksApi
 * @extends {BaseAPI}
 */
export class BlocksApi extends BaseAPI {
    /**
     * Get tx history by block height.
     * @param {number} height Block height
     * @param {number} cursor Start offset
     * @param {number} size Number of items returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlocksApi
     */
    public async v1IndexerBlockHeightTxsGet(height: number, cursor: number, size: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2005>> {
        return BlocksApiFp(this.configuration).v1IndexerBlockHeightTxsGet(height, cursor, size, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get blockchain info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlocksApi
     */
    public async v1IndexerBlockchainInfoGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {
        return BlocksApiFp(this.configuration).v1IndexerBlockchainInfoGet(options).then((request) => request(this.axios, this.basePath));
    }
}
