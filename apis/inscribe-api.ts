/* tslint:disable */
/* eslint-disable */
/**
 * UniSat Wallet - OpenAPI
 * This is UniSat Wallet Open API. If you wish to use the OpenAPI, please feel free to send us an email, and we will provide you with an API KEY.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@unisat.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200 } from '../models';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse2003 } from '../models';
import { OrderCreateBRC20DeployParams } from '../models';
import { OrderCreateBRC20MintParams } from '../models';
import { OrderCreateBRC20TransferParams } from '../models';
import { OrderCreateParams } from '../models';
import { OrderIdRefundBody } from '../models';
/**
 * InscribeApi - axios parameter creator
 * @export
 */
export const InscribeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an order to inscribe BRC-20 DEPLOY
         * @param {OrderCreateBRC20DeployParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2InscribeOrderCreateBrc20DeployPost: async (body: OrderCreateBRC20DeployParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2InscribeOrderCreateBrc20DeployPost.');
            }
            const localVarPath = `/v2/inscribe/order/create/brc20-deploy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an order to inscribe BRC-20 MINT
         * @param {OrderCreateBRC20MintParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2InscribeOrderCreateBrc20MintPost: async (body: OrderCreateBRC20MintParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2InscribeOrderCreateBrc20MintPost.');
            }
            const localVarPath = `/v2/inscribe/order/create/brc20-mint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an order to inscribe BRC-20 TRANSFER
         * @param {OrderCreateBRC20TransferParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2InscribeOrderCreateBrc20TransferPost: async (body: OrderCreateBRC20TransferParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2InscribeOrderCreateBrc20TransferPost.');
            }
            const localVarPath = `/v2/inscribe/order/create/brc20-transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an order to inscribe something
         * @summary Create an order
         * @param {OrderCreateParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2InscribeOrderCreatePost: async (body: OrderCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2InscribeOrderCreatePost.');
            }
            const localVarPath = `/v2/inscribe/order/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * It's recommended to query the latest status every 10 seconds.  _amount = outputValue*count + minerFee + serviceFee + devFee_
         * @summary Search an order by orderId
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2InscribeOrderOrderIdGet: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling v2InscribeOrderOrderIdGet.');
            }
            const localVarPath = `/v2/inscribe/order/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * RefundAmount = PaidAmount - RefundTxSize * RefundFeeRate. This value must be greater than SafeRefundAmount, otherwise there's a risk of losing inscriptions used for payment due to errors.
         * @summary Estimate the size of the refund transaction
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2InscribeOrderOrderIdRefundEstimatePost: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling v2InscribeOrderOrderIdRefundEstimatePost.');
            }
            const localVarPath = `/v2/inscribe/order/{orderId}/refund-estimate`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * When the amount paid by the user includes inscriptions, inscribing cannot be performed. Refund can be requested through this method.
         * @summary Process a refund for an order.
         * @param {OrderIdRefundBody} body 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2InscribeOrderOrderIdRefundPost: async (body: OrderIdRefundBody, orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2InscribeOrderOrderIdRefundPost.');
            }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling v2InscribeOrderOrderIdRefundPost.');
            }
            const localVarPath = `/v2/inscribe/order/{orderId}/refund`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InscribeApi - functional programming interface
 * @export
 */
export const InscribeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an order to inscribe BRC-20 DEPLOY
         * @param {OrderCreateBRC20DeployParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderCreateBrc20DeployPost(body: OrderCreateBRC20DeployParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await InscribeApiAxiosParamCreator(configuration).v2InscribeOrderCreateBrc20DeployPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create an order to inscribe BRC-20 MINT
         * @param {OrderCreateBRC20MintParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderCreateBrc20MintPost(body: OrderCreateBRC20MintParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await InscribeApiAxiosParamCreator(configuration).v2InscribeOrderCreateBrc20MintPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create an order to inscribe BRC-20 TRANSFER
         * @param {OrderCreateBRC20TransferParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderCreateBrc20TransferPost(body: OrderCreateBRC20TransferParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await InscribeApiAxiosParamCreator(configuration).v2InscribeOrderCreateBrc20TransferPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create an order to inscribe something
         * @summary Create an order
         * @param {OrderCreateParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderCreatePost(body: OrderCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await InscribeApiAxiosParamCreator(configuration).v2InscribeOrderCreatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * It's recommended to query the latest status every 10 seconds.  _amount = outputValue*count + minerFee + serviceFee + devFee_
         * @summary Search an order by orderId
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderOrderIdGet(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await InscribeApiAxiosParamCreator(configuration).v2InscribeOrderOrderIdGet(orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * RefundAmount = PaidAmount - RefundTxSize * RefundFeeRate. This value must be greater than SafeRefundAmount, otherwise there's a risk of losing inscriptions used for payment due to errors.
         * @summary Estimate the size of the refund transaction
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderOrderIdRefundEstimatePost(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2003>>> {
            const localVarAxiosArgs = await InscribeApiAxiosParamCreator(configuration).v2InscribeOrderOrderIdRefundEstimatePost(orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * When the amount paid by the user includes inscriptions, inscribing cannot be performed. Refund can be requested through this method.
         * @summary Process a refund for an order.
         * @param {OrderIdRefundBody} body 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderOrderIdRefundPost(body: OrderIdRefundBody, orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await InscribeApiAxiosParamCreator(configuration).v2InscribeOrderOrderIdRefundPost(body, orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InscribeApi - factory interface
 * @export
 */
export const InscribeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create an order to inscribe BRC-20 DEPLOY
         * @param {OrderCreateBRC20DeployParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderCreateBrc20DeployPost(body: OrderCreateBRC20DeployParams, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return InscribeApiFp(configuration).v2InscribeOrderCreateBrc20DeployPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an order to inscribe BRC-20 MINT
         * @param {OrderCreateBRC20MintParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderCreateBrc20MintPost(body: OrderCreateBRC20MintParams, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return InscribeApiFp(configuration).v2InscribeOrderCreateBrc20MintPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an order to inscribe BRC-20 TRANSFER
         * @param {OrderCreateBRC20TransferParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderCreateBrc20TransferPost(body: OrderCreateBRC20TransferParams, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return InscribeApiFp(configuration).v2InscribeOrderCreateBrc20TransferPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an order to inscribe something
         * @summary Create an order
         * @param {OrderCreateParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderCreatePost(body: OrderCreateParams, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return InscribeApiFp(configuration).v2InscribeOrderCreatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * It's recommended to query the latest status every 10 seconds.  _amount = outputValue*count + minerFee + serviceFee + devFee_
         * @summary Search an order by orderId
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderOrderIdGet(orderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return InscribeApiFp(configuration).v2InscribeOrderOrderIdGet(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * RefundAmount = PaidAmount - RefundTxSize * RefundFeeRate. This value must be greater than SafeRefundAmount, otherwise there's a risk of losing inscriptions used for payment due to errors.
         * @summary Estimate the size of the refund transaction
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderOrderIdRefundEstimatePost(orderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>> {
            return InscribeApiFp(configuration).v2InscribeOrderOrderIdRefundEstimatePost(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * When the amount paid by the user includes inscriptions, inscribing cannot be performed. Refund can be requested through this method.
         * @summary Process a refund for an order.
         * @param {OrderIdRefundBody} body 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2InscribeOrderOrderIdRefundPost(body: OrderIdRefundBody, orderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return InscribeApiFp(configuration).v2InscribeOrderOrderIdRefundPost(body, orderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InscribeApi - object-oriented interface
 * @export
 * @class InscribeApi
 * @extends {BaseAPI}
 */
export class InscribeApi extends BaseAPI {
    /**
     * 
     * @summary Create an order to inscribe BRC-20 DEPLOY
     * @param {OrderCreateBRC20DeployParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscribeApi
     */
    public async v2InscribeOrderCreateBrc20DeployPost(body: OrderCreateBRC20DeployParams, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return InscribeApiFp(this.configuration).v2InscribeOrderCreateBrc20DeployPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create an order to inscribe BRC-20 MINT
     * @param {OrderCreateBRC20MintParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscribeApi
     */
    public async v2InscribeOrderCreateBrc20MintPost(body: OrderCreateBRC20MintParams, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return InscribeApiFp(this.configuration).v2InscribeOrderCreateBrc20MintPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create an order to inscribe BRC-20 TRANSFER
     * @param {OrderCreateBRC20TransferParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscribeApi
     */
    public async v2InscribeOrderCreateBrc20TransferPost(body: OrderCreateBRC20TransferParams, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return InscribeApiFp(this.configuration).v2InscribeOrderCreateBrc20TransferPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an order to inscribe something
     * @summary Create an order
     * @param {OrderCreateParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscribeApi
     */
    public async v2InscribeOrderCreatePost(body: OrderCreateParams, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return InscribeApiFp(this.configuration).v2InscribeOrderCreatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * It's recommended to query the latest status every 10 seconds.  _amount = outputValue*count + minerFee + serviceFee + devFee_
     * @summary Search an order by orderId
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscribeApi
     */
    public async v2InscribeOrderOrderIdGet(orderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return InscribeApiFp(this.configuration).v2InscribeOrderOrderIdGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * RefundAmount = PaidAmount - RefundTxSize * RefundFeeRate. This value must be greater than SafeRefundAmount, otherwise there's a risk of losing inscriptions used for payment due to errors.
     * @summary Estimate the size of the refund transaction
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscribeApi
     */
    public async v2InscribeOrderOrderIdRefundEstimatePost(orderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2003>> {
        return InscribeApiFp(this.configuration).v2InscribeOrderOrderIdRefundEstimatePost(orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When the amount paid by the user includes inscriptions, inscribing cannot be performed. Refund can be requested through this method.
     * @summary Process a refund for an order.
     * @param {OrderIdRefundBody} body 
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscribeApi
     */
    public async v2InscribeOrderOrderIdRefundPost(body: OrderIdRefundBody, orderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return InscribeApiFp(this.configuration).v2InscribeOrderOrderIdRefundPost(body, orderId, options).then((request) => request(this.axios, this.basePath));
    }
}
