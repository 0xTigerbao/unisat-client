/* tslint:disable */
/* eslint-disable */
/**
 * UniSat Wallet - OpenAPI
 * This is UniSat Wallet Open API. If you wish to use the OpenAPI, please feel free to send us an email, and we will provide you with an API KEY.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@unisat.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20013 } from '../models';
import { InlineResponse20014 } from '../models';
import { InlineResponse20015 } from '../models';
import { InlineResponse20016 } from '../models';
import { InlineResponse20017 } from '../models';
import { InlineResponse20018 } from '../models';
import { InlineResponse20019 } from '../models';
import { InlineResponse20020 } from '../models';
import { InlineResponse20021 } from '../models';
import { InlineResponse20022 } from '../models';
/**
 * BRC20Api - axios parameter creator
 * @export
 */
export const BRC20ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Obtain BRC20 token summary by address, including available balance, transferable balance
         * @param {string} address Address
         * @param {string} height Block Height
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerAddressAddressBrc20SummaryByHeightHeightGet: async (address: string, height: string, start: number, limit: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling v1IndexerAddressAddressBrc20SummaryByHeightHeightGet.');
            }
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError('height','Required parameter height was null or undefined when calling v1IndexerAddressAddressBrc20SummaryByHeightHeightGet.');
            }
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling v1IndexerAddressAddressBrc20SummaryByHeightHeightGet.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v1IndexerAddressAddressBrc20SummaryByHeightHeightGet.');
            }
            const localVarPath = `/v1/indexer/address/{address}/brc20/summary-by-height/{height}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain BRC20 token summary by address, including available balance, transferable balance
         * @param {string} address Address
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerAddressAddressBrc20SummaryGet: async (address: string, start: number, limit: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling v1IndexerAddressAddressBrc20SummaryGet.');
            }
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling v1IndexerAddressAddressBrc20SummaryGet.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v1IndexerAddressAddressBrc20SummaryGet.');
            }
            const localVarPath = `/v1/indexer/address/{address}/brc20/summary`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the full history of BRC20 by address.
         * @param {string} address Address
         * @param {string} ticker Token ticker
         * @param {string} type Filter by history type
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerAddressAddressBrc20TickerHistoryGet: async (address: string, ticker: string, type: string, start: number, limit: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling v1IndexerAddressAddressBrc20TickerHistoryGet.');
            }
            // verify required parameter 'ticker' is not null or undefined
            if (ticker === null || ticker === undefined) {
                throw new RequiredError('ticker','Required parameter ticker was null or undefined when calling v1IndexerAddressAddressBrc20TickerHistoryGet.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v1IndexerAddressAddressBrc20TickerHistoryGet.');
            }
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling v1IndexerAddressAddressBrc20TickerHistoryGet.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v1IndexerAddressAddressBrc20TickerHistoryGet.');
            }
            const localVarPath = `/v1/indexer/address/{address}/brc20/{ticker}/history`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"ticker"}}`, encodeURIComponent(String(ticker)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain BRC20 token infomation by address, including available balance, transferable balance, number of transferable inscriptions, the first few Inscriptions, etc.
         * @param {string} address Address
         * @param {string} ticker Token ticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerAddressAddressBrc20TickerInfoGet: async (address: string, ticker: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling v1IndexerAddressAddressBrc20TickerInfoGet.');
            }
            // verify required parameter 'ticker' is not null or undefined
            if (ticker === null || ticker === undefined) {
                throw new RequiredError('ticker','Required parameter ticker was null or undefined when calling v1IndexerAddressAddressBrc20TickerInfoGet.');
            }
            const localVarPath = `/v1/indexer/address/{address}/brc20/{ticker}/info`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"ticker"}}`, encodeURIComponent(String(ticker)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the transferable inscriptions list of BRC20 by address.
         * @param {string} address Address
         * @param {string} ticker Token ticker
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerAddressAddressBrc20TickerTransferableInscriptionsGet: async (address: string, ticker: string, start: number, limit: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling v1IndexerAddressAddressBrc20TickerTransferableInscriptionsGet.');
            }
            // verify required parameter 'ticker' is not null or undefined
            if (ticker === null || ticker === undefined) {
                throw new RequiredError('ticker','Required parameter ticker was null or undefined when calling v1IndexerAddressAddressBrc20TickerTransferableInscriptionsGet.');
            }
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling v1IndexerAddressAddressBrc20TickerTransferableInscriptionsGet.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v1IndexerAddressAddressBrc20TickerTransferableInscriptionsGet.');
            }
            const localVarPath = `/v1/indexer/address/{address}/brc20/{ticker}/transferable-inscriptions`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"ticker"}}`, encodeURIComponent(String(ticker)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the best block height of BRC20 data. This value will be consistent with the latest block height a short time after the block has been confirmed.
         * @summary Get the best block height of BRC20 data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerBrc20BestheightGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/indexer/brc20/bestheight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the tiker list of BRC20 token.
         * @param {number} height Block Height
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerBrc20HistoryByHeightHeightGet: async (height: number, start: number, limit: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError('height','Required parameter height was null or undefined when calling v1IndexerBrc20HistoryByHeightHeightGet.');
            }
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling v1IndexerBrc20HistoryByHeightHeightGet.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v1IndexerBrc20HistoryByHeightHeightGet.');
            }
            const localVarPath = `/v1/indexer/brc20/history-by-height/{height}`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the tiker list of BRC20 token.
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerBrc20ListGet: async (start: number, limit: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling v1IndexerBrc20ListGet.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v1IndexerBrc20ListGet.');
            }
            const localVarPath = `/v1/indexer/brc20/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain BRC20 token summary by address, including available balance, transferable balance
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {string} [sort] sort by (holders/deploy/minted/transactions)
         * @param {string} [complete] filter by (completed or not)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerBrc20StatusGet: async (start: number, limit: number, sort?: string, complete?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling v1IndexerBrc20StatusGet.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v1IndexerBrc20StatusGet.');
            }
            const localVarPath = `/v1/indexer/brc20/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (complete !== undefined) {
                localVarQueryParameter['complete'] = complete;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the full history of BRC20.
         * @param {string} ticker Token ticker
         * @param {string} type Filter by history type
         * @param {number} height Block height
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerBrc20TickerHistoryGet: async (ticker: string, type: string, height: number, start: number, limit: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticker' is not null or undefined
            if (ticker === null || ticker === undefined) {
                throw new RequiredError('ticker','Required parameter ticker was null or undefined when calling v1IndexerBrc20TickerHistoryGet.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v1IndexerBrc20TickerHistoryGet.');
            }
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError('height','Required parameter height was null or undefined when calling v1IndexerBrc20TickerHistoryGet.');
            }
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling v1IndexerBrc20TickerHistoryGet.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v1IndexerBrc20TickerHistoryGet.');
            }
            const localVarPath = `/v1/indexer/brc20/{ticker}/history`
                .replace(`{${"ticker"}}`, encodeURIComponent(String(ticker)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the holders of BRC20 by ticker.
         * @param {string} ticker Token ticker
         * @param {number} start Start offset
         * @param {number} limit Number of returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerBrc20TickerHoldersGet: async (ticker: string, start: number, limit: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticker' is not null or undefined
            if (ticker === null || ticker === undefined) {
                throw new RequiredError('ticker','Required parameter ticker was null or undefined when calling v1IndexerBrc20TickerHoldersGet.');
            }
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling v1IndexerBrc20TickerHoldersGet.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v1IndexerBrc20TickerHoldersGet.');
            }
            const localVarPath = `/v1/indexer/brc20/{ticker}/holders`
                .replace(`{${"ticker"}}`, encodeURIComponent(String(ticker)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the infomation of BRC20 by ticker.
         * @param {string} ticker Token ticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerBrc20TickerInfoGet: async (ticker: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticker' is not null or undefined
            if (ticker === null || ticker === undefined) {
                throw new RequiredError('ticker','Required parameter ticker was null or undefined when calling v1IndexerBrc20TickerInfoGet.');
            }
            const localVarPath = `/v1/indexer/brc20/{ticker}/info`
                .replace(`{${"ticker"}}`, encodeURIComponent(String(ticker)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the full history of BRC20 by address.
         * @param {string} ticker Token ticker
         * @param {string} txid txid
         * @param {string} type Filter by history type
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndexerBrc20TickerTxTxidHistoryGet: async (ticker: string, txid: string, type: string, start: number, limit: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticker' is not null or undefined
            if (ticker === null || ticker === undefined) {
                throw new RequiredError('ticker','Required parameter ticker was null or undefined when calling v1IndexerBrc20TickerTxTxidHistoryGet.');
            }
            // verify required parameter 'txid' is not null or undefined
            if (txid === null || txid === undefined) {
                throw new RequiredError('txid','Required parameter txid was null or undefined when calling v1IndexerBrc20TickerTxTxidHistoryGet.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v1IndexerBrc20TickerTxTxidHistoryGet.');
            }
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling v1IndexerBrc20TickerTxTxidHistoryGet.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v1IndexerBrc20TickerTxTxidHistoryGet.');
            }
            const localVarPath = `/v1/indexer/brc20/{ticker}/tx/{txid}/history`
                .replace(`{${"ticker"}}`, encodeURIComponent(String(ticker)))
                .replace(`{${"txid"}}`, encodeURIComponent(String(txid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BRC20Api - functional programming interface
 * @export
 */
export const BRC20ApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Obtain BRC20 token summary by address, including available balance, transferable balance
         * @param {string} address Address
         * @param {string} height Block Height
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerAddressAddressBrc20SummaryByHeightHeightGet(address: string, height: string, start: number, limit: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20020>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerAddressAddressBrc20SummaryByHeightHeightGet(address, height, start, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Obtain BRC20 token summary by address, including available balance, transferable balance
         * @param {string} address Address
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerAddressAddressBrc20SummaryGet(address: string, start: number, limit: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20020>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerAddressAddressBrc20SummaryGet(address, start, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the full history of BRC20 by address.
         * @param {string} address Address
         * @param {string} ticker Token ticker
         * @param {string} type Filter by history type
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerAddressAddressBrc20TickerHistoryGet(address: string, ticker: string, type: string, start: number, limit: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20018>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerAddressAddressBrc20TickerHistoryGet(address, ticker, type, start, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Obtain BRC20 token infomation by address, including available balance, transferable balance, number of transferable inscriptions, the first few Inscriptions, etc.
         * @param {string} address Address
         * @param {string} ticker Token ticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerAddressAddressBrc20TickerInfoGet(address: string, ticker: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20021>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerAddressAddressBrc20TickerInfoGet(address, ticker, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the transferable inscriptions list of BRC20 by address.
         * @param {string} address Address
         * @param {string} ticker Token ticker
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerAddressAddressBrc20TickerTransferableInscriptionsGet(address: string, ticker: string, start: number, limit: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20022>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerAddressAddressBrc20TickerTransferableInscriptionsGet(address, ticker, start, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the best block height of BRC20 data. This value will be consistent with the latest block height a short time after the block has been confirmed.
         * @summary Get the best block height of BRC20 data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20BestheightGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20013>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerBrc20BestheightGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the tiker list of BRC20 token.
         * @param {number} height Block Height
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20HistoryByHeightHeightGet(height: number, start: number, limit: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20019>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerBrc20HistoryByHeightHeightGet(height, start, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the tiker list of BRC20 token.
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20ListGet(start: number, limit: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20014>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerBrc20ListGet(start, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Obtain BRC20 token summary by address, including available balance, transferable balance
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {string} [sort] sort by (holders/deploy/minted/transactions)
         * @param {string} [complete] filter by (completed or not)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20StatusGet(start: number, limit: number, sort?: string, complete?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20015>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerBrc20StatusGet(start, limit, sort, complete, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the full history of BRC20.
         * @param {string} ticker Token ticker
         * @param {string} type Filter by history type
         * @param {number} height Block height
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20TickerHistoryGet(ticker: string, type: string, height: number, start: number, limit: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20018>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerBrc20TickerHistoryGet(ticker, type, height, start, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the holders of BRC20 by ticker.
         * @param {string} ticker Token ticker
         * @param {number} start Start offset
         * @param {number} limit Number of returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20TickerHoldersGet(ticker: string, start: number, limit: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20017>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerBrc20TickerHoldersGet(ticker, start, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the infomation of BRC20 by ticker.
         * @param {string} ticker Token ticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20TickerInfoGet(ticker: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20016>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerBrc20TickerInfoGet(ticker, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the full history of BRC20 by address.
         * @param {string} ticker Token ticker
         * @param {string} txid txid
         * @param {string} type Filter by history type
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20TickerTxTxidHistoryGet(ticker: string, txid: string, type: string, start: number, limit: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20018>>> {
            const localVarAxiosArgs = await BRC20ApiAxiosParamCreator(configuration).v1IndexerBrc20TickerTxTxidHistoryGet(ticker, txid, type, start, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BRC20Api - factory interface
 * @export
 */
export const BRC20ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Obtain BRC20 token summary by address, including available balance, transferable balance
         * @param {string} address Address
         * @param {string} height Block Height
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerAddressAddressBrc20SummaryByHeightHeightGet(address: string, height: string, start: number, limit: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20020>> {
            return BRC20ApiFp(configuration).v1IndexerAddressAddressBrc20SummaryByHeightHeightGet(address, height, start, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain BRC20 token summary by address, including available balance, transferable balance
         * @param {string} address Address
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerAddressAddressBrc20SummaryGet(address: string, start: number, limit: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20020>> {
            return BRC20ApiFp(configuration).v1IndexerAddressAddressBrc20SummaryGet(address, start, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the full history of BRC20 by address.
         * @param {string} address Address
         * @param {string} ticker Token ticker
         * @param {string} type Filter by history type
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerAddressAddressBrc20TickerHistoryGet(address: string, ticker: string, type: string, start: number, limit: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20018>> {
            return BRC20ApiFp(configuration).v1IndexerAddressAddressBrc20TickerHistoryGet(address, ticker, type, start, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain BRC20 token infomation by address, including available balance, transferable balance, number of transferable inscriptions, the first few Inscriptions, etc.
         * @param {string} address Address
         * @param {string} ticker Token ticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerAddressAddressBrc20TickerInfoGet(address: string, ticker: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20021>> {
            return BRC20ApiFp(configuration).v1IndexerAddressAddressBrc20TickerInfoGet(address, ticker, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the transferable inscriptions list of BRC20 by address.
         * @param {string} address Address
         * @param {string} ticker Token ticker
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerAddressAddressBrc20TickerTransferableInscriptionsGet(address: string, ticker: string, start: number, limit: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20022>> {
            return BRC20ApiFp(configuration).v1IndexerAddressAddressBrc20TickerTransferableInscriptionsGet(address, ticker, start, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the best block height of BRC20 data. This value will be consistent with the latest block height a short time after the block has been confirmed.
         * @summary Get the best block height of BRC20 data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20BestheightGet(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20013>> {
            return BRC20ApiFp(configuration).v1IndexerBrc20BestheightGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the tiker list of BRC20 token.
         * @param {number} height Block Height
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20HistoryByHeightHeightGet(height: number, start: number, limit: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20019>> {
            return BRC20ApiFp(configuration).v1IndexerBrc20HistoryByHeightHeightGet(height, start, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the tiker list of BRC20 token.
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20ListGet(start: number, limit: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20014>> {
            return BRC20ApiFp(configuration).v1IndexerBrc20ListGet(start, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain BRC20 token summary by address, including available balance, transferable balance
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {string} [sort] sort by (holders/deploy/minted/transactions)
         * @param {string} [complete] filter by (completed or not)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20StatusGet(start: number, limit: number, sort?: string, complete?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20015>> {
            return BRC20ApiFp(configuration).v1IndexerBrc20StatusGet(start, limit, sort, complete, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the full history of BRC20.
         * @param {string} ticker Token ticker
         * @param {string} type Filter by history type
         * @param {number} height Block height
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20TickerHistoryGet(ticker: string, type: string, height: number, start: number, limit: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20018>> {
            return BRC20ApiFp(configuration).v1IndexerBrc20TickerHistoryGet(ticker, type, height, start, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the holders of BRC20 by ticker.
         * @param {string} ticker Token ticker
         * @param {number} start Start offset
         * @param {number} limit Number of returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20TickerHoldersGet(ticker: string, start: number, limit: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20017>> {
            return BRC20ApiFp(configuration).v1IndexerBrc20TickerHoldersGet(ticker, start, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the infomation of BRC20 by ticker.
         * @param {string} ticker Token ticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20TickerInfoGet(ticker: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20016>> {
            return BRC20ApiFp(configuration).v1IndexerBrc20TickerInfoGet(ticker, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the full history of BRC20 by address.
         * @param {string} ticker Token ticker
         * @param {string} txid txid
         * @param {string} type Filter by history type
         * @param {number} start Start offset
         * @param {number} limit Number of inscriptions returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndexerBrc20TickerTxTxidHistoryGet(ticker: string, txid: string, type: string, start: number, limit: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20018>> {
            return BRC20ApiFp(configuration).v1IndexerBrc20TickerTxTxidHistoryGet(ticker, txid, type, start, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BRC20Api - object-oriented interface
 * @export
 * @class BRC20Api
 * @extends {BaseAPI}
 */
export class BRC20Api extends BaseAPI {
    /**
     * Obtain BRC20 token summary by address, including available balance, transferable balance
     * @param {string} address Address
     * @param {string} height Block Height
     * @param {number} start Start offset
     * @param {number} limit Number of inscriptions returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerAddressAddressBrc20SummaryByHeightHeightGet(address: string, height: string, start: number, limit: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20020>> {
        return BRC20ApiFp(this.configuration).v1IndexerAddressAddressBrc20SummaryByHeightHeightGet(address, height, start, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Obtain BRC20 token summary by address, including available balance, transferable balance
     * @param {string} address Address
     * @param {number} start Start offset
     * @param {number} limit Number of inscriptions returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerAddressAddressBrc20SummaryGet(address: string, start: number, limit: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20020>> {
        return BRC20ApiFp(this.configuration).v1IndexerAddressAddressBrc20SummaryGet(address, start, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the full history of BRC20 by address.
     * @param {string} address Address
     * @param {string} ticker Token ticker
     * @param {string} type Filter by history type
     * @param {number} start Start offset
     * @param {number} limit Number of inscriptions returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerAddressAddressBrc20TickerHistoryGet(address: string, ticker: string, type: string, start: number, limit: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20018>> {
        return BRC20ApiFp(this.configuration).v1IndexerAddressAddressBrc20TickerHistoryGet(address, ticker, type, start, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Obtain BRC20 token infomation by address, including available balance, transferable balance, number of transferable inscriptions, the first few Inscriptions, etc.
     * @param {string} address Address
     * @param {string} ticker Token ticker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerAddressAddressBrc20TickerInfoGet(address: string, ticker: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20021>> {
        return BRC20ApiFp(this.configuration).v1IndexerAddressAddressBrc20TickerInfoGet(address, ticker, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the transferable inscriptions list of BRC20 by address.
     * @param {string} address Address
     * @param {string} ticker Token ticker
     * @param {number} start Start offset
     * @param {number} limit Number of inscriptions returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerAddressAddressBrc20TickerTransferableInscriptionsGet(address: string, ticker: string, start: number, limit: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20022>> {
        return BRC20ApiFp(this.configuration).v1IndexerAddressAddressBrc20TickerTransferableInscriptionsGet(address, ticker, start, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the best block height of BRC20 data. This value will be consistent with the latest block height a short time after the block has been confirmed.
     * @summary Get the best block height of BRC20 data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerBrc20BestheightGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20013>> {
        return BRC20ApiFp(this.configuration).v1IndexerBrc20BestheightGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the tiker list of BRC20 token.
     * @param {number} height Block Height
     * @param {number} start Start offset
     * @param {number} limit Number of inscriptions returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerBrc20HistoryByHeightHeightGet(height: number, start: number, limit: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20019>> {
        return BRC20ApiFp(this.configuration).v1IndexerBrc20HistoryByHeightHeightGet(height, start, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the tiker list of BRC20 token.
     * @param {number} start Start offset
     * @param {number} limit Number of inscriptions returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerBrc20ListGet(start: number, limit: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20014>> {
        return BRC20ApiFp(this.configuration).v1IndexerBrc20ListGet(start, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Obtain BRC20 token summary by address, including available balance, transferable balance
     * @param {number} start Start offset
     * @param {number} limit Number of inscriptions returned
     * @param {string} [sort] sort by (holders/deploy/minted/transactions)
     * @param {string} [complete] filter by (completed or not)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerBrc20StatusGet(start: number, limit: number, sort?: string, complete?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20015>> {
        return BRC20ApiFp(this.configuration).v1IndexerBrc20StatusGet(start, limit, sort, complete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the full history of BRC20.
     * @param {string} ticker Token ticker
     * @param {string} type Filter by history type
     * @param {number} height Block height
     * @param {number} start Start offset
     * @param {number} limit Number of inscriptions returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerBrc20TickerHistoryGet(ticker: string, type: string, height: number, start: number, limit: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20018>> {
        return BRC20ApiFp(this.configuration).v1IndexerBrc20TickerHistoryGet(ticker, type, height, start, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the holders of BRC20 by ticker.
     * @param {string} ticker Token ticker
     * @param {number} start Start offset
     * @param {number} limit Number of returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerBrc20TickerHoldersGet(ticker: string, start: number, limit: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20017>> {
        return BRC20ApiFp(this.configuration).v1IndexerBrc20TickerHoldersGet(ticker, start, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the infomation of BRC20 by ticker.
     * @param {string} ticker Token ticker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerBrc20TickerInfoGet(ticker: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20016>> {
        return BRC20ApiFp(this.configuration).v1IndexerBrc20TickerInfoGet(ticker, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the full history of BRC20 by address.
     * @param {string} ticker Token ticker
     * @param {string} txid txid
     * @param {string} type Filter by history type
     * @param {number} start Start offset
     * @param {number} limit Number of inscriptions returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BRC20Api
     */
    public async v1IndexerBrc20TickerTxTxidHistoryGet(ticker: string, txid: string, type: string, start: number, limit: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20018>> {
        return BRC20ApiFp(this.configuration).v1IndexerBrc20TickerTxTxidHistoryGet(ticker, txid, type, start, limit, options).then((request) => request(this.axios, this.basePath));
    }
}
