/* tslint:disable */
/* eslint-disable */
/**
 * UniSat Wallet - OpenAPI
 * This is UniSat Wallet Open API. If you wish to use the OpenAPI, please feel free to send us an email, and we will provide you with an API KEY.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@unisat.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AuctionActionsBody } from '../models';
import { AuctionBindBody } from '../models';
import { AuctionBrc20KlineBody } from '../models';
import { AuctionBrc20TypesBody } from '../models';
import { AuctionBrc20TypesSpecifiedBody } from '../models';
import { AuctionConfirmBidBody } from '../models';
import { AuctionConfirmModifyPriceBody } from '../models';
import { AuctionConfirmPutOffBody } from '../models';
import { AuctionConfirmPutOnBody } from '../models';
import { AuctionCreateBidBody } from '../models';
import { AuctionCreateModifyPriceBody } from '../models';
import { AuctionCreatePutOffBody } from '../models';
import { AuctionCreatePutOnBody } from '../models';
import { AuctionListBody } from '../models';
import { InlineResponse20028 } from '../models';
import { InlineResponse20049 } from '../models';
import { InlineResponse20050 } from '../models';
import { InlineResponse20051 } from '../models';
import { InlineResponse20052 } from '../models';
import { InlineResponse20053 } from '../models';
import { InlineResponse20054 } from '../models';
import { InlineResponse20055 } from '../models';
import { InlineResponse20056 } from '../models';
import { InlineResponse20057 } from '../models';
import { InlineResponse20058 } from '../models';
import { InlineResponse20059 } from '../models';
/**
 * MarketPlaceApi - axios parameter creator
 * @export
 */
export const MarketPlaceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bind btcAddress and nftAddress.
         * @param {AuctionBindBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketBrc20AuctionBindPost: async (body: AuctionBindBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v3MarketBrc20AuctionBindPost.');
            }
            const localVarPath = `/v3/market/brc20/auction/bind`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tick k line.
         * @param {AuctionBrc20KlineBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketBrc20AuctionBrc20KlinePost: async (body: AuctionBrc20KlineBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v3MarketBrc20AuctionBrc20KlinePost.');
            }
            const localVarPath = `/v3/market/brc20/auction/brc20_kline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get statistical data, price, market capitalization, etc. for BRC20.
         * @param {AuctionBrc20TypesBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketBrc20AuctionBrc20TypesPost: async (body?: AuctionBrc20TypesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/market/brc20/auction/brc20_types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get statistical data, price, market capitalization, etc. for BRC20.
         * @param {AuctionBrc20TypesSpecifiedBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketBrc20AuctionBrc20TypesSpecifiedPost: async (body?: AuctionBrc20TypesSpecifiedBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/market/brc20/auction/brc20_types_specified`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get information on listings, delistings, and sales.
         * @param {AuctionActionsBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketTypeAuctionActionsPost: async (body: AuctionActionsBody, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v3MarketTypeAuctionActionsPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v3MarketTypeAuctionActionsPost.');
            }
            const localVarPath = `/v3/market/{type}/auction/actions`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm purchase order.
         * @param {AuctionConfirmBidBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketTypeAuctionConfirmBidPost: async (body: AuctionConfirmBidBody, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v3MarketTypeAuctionConfirmBidPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v3MarketTypeAuctionConfirmBidPost.');
            }
            const localVarPath = `/v3/market/{type}/auction/confirm_bid`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm the order for price adjustment.
         * @param {AuctionConfirmModifyPriceBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketTypeAuctionConfirmModifyPricePost: async (body: AuctionConfirmModifyPriceBody, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v3MarketTypeAuctionConfirmModifyPricePost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v3MarketTypeAuctionConfirmModifyPricePost.');
            }
            const localVarPath = `/v3/market/{type}/auction/confirm_modify_price`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm delisting order.
         * @param {AuctionConfirmPutOffBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketTypeAuctionConfirmPutOffPost: async (body: AuctionConfirmPutOffBody, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v3MarketTypeAuctionConfirmPutOffPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v3MarketTypeAuctionConfirmPutOffPost.');
            }
            const localVarPath = `/v3/market/{type}/auction/confirm_put_off`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm listing order.
         * @param {AuctionConfirmPutOnBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketTypeAuctionConfirmPutOnPost: async (body: AuctionConfirmPutOnBody, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v3MarketTypeAuctionConfirmPutOnPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v3MarketTypeAuctionConfirmPutOnPost.');
            }
            const localVarPath = `/v3/market/{type}/auction/confirm_put_on`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create purchase order.
         * @param {AuctionCreateBidBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketTypeAuctionCreateBidPost: async (body: AuctionCreateBidBody, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v3MarketTypeAuctionCreateBidPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v3MarketTypeAuctionCreateBidPost.');
            }
            const localVarPath = `/v3/market/{type}/auction/create_bid`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create the order for price adjustment.
         * @param {AuctionCreateModifyPriceBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketTypeAuctionCreateModifyPricePost: async (body: AuctionCreateModifyPriceBody, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v3MarketTypeAuctionCreateModifyPricePost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v3MarketTypeAuctionCreateModifyPricePost.');
            }
            const localVarPath = `/v3/market/{type}/auction/create_modify_price`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create delisting order.
         * @param {AuctionCreatePutOffBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketTypeAuctionCreatePutOffPost: async (body: AuctionCreatePutOffBody, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v3MarketTypeAuctionCreatePutOffPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v3MarketTypeAuctionCreatePutOffPost.');
            }
            const localVarPath = `/v3/market/{type}/auction/create_put_off`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create listing order.
         * @param {AuctionCreatePutOnBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketTypeAuctionCreatePutOnPost: async (body: AuctionCreatePutOnBody, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v3MarketTypeAuctionCreatePutOnPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v3MarketTypeAuctionCreatePutOnPost.');
            }
            const localVarPath = `/v3/market/{type}/auction/create_put_on`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the list information of the market.
         * @param {AuctionListBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v3MarketTypeAuctionListPost: async (body: AuctionListBody, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v3MarketTypeAuctionListPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling v3MarketTypeAuctionListPost.');
            }
            const localVarPath = `/v3/market/{type}/auction/list`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketPlaceApi - functional programming interface
 * @export
 */
export const MarketPlaceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bind btcAddress and nftAddress.
         * @param {AuctionBindBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketBrc20AuctionBindPost(body: AuctionBindBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20028>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketBrc20AuctionBindPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get tick k line.
         * @param {AuctionBrc20KlineBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketBrc20AuctionBrc20KlinePost(body: AuctionBrc20KlineBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20049>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketBrc20AuctionBrc20KlinePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get statistical data, price, market capitalization, etc. for BRC20.
         * @param {AuctionBrc20TypesBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketBrc20AuctionBrc20TypesPost(body?: AuctionBrc20TypesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20050>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketBrc20AuctionBrc20TypesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get statistical data, price, market capitalization, etc. for BRC20.
         * @param {AuctionBrc20TypesSpecifiedBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketBrc20AuctionBrc20TypesSpecifiedPost(body?: AuctionBrc20TypesSpecifiedBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20051>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketBrc20AuctionBrc20TypesSpecifiedPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get information on listings, delistings, and sales.
         * @param {AuctionActionsBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionActionsPost(body: AuctionActionsBody, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20053>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketTypeAuctionActionsPost(body, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Confirm purchase order.
         * @param {AuctionConfirmBidBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionConfirmBidPost(body: AuctionConfirmBidBody, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20056>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketTypeAuctionConfirmBidPost(body, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Confirm the order for price adjustment.
         * @param {AuctionConfirmModifyPriceBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionConfirmModifyPricePost(body: AuctionConfirmModifyPriceBody, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20028>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketTypeAuctionConfirmModifyPricePost(body, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Confirm delisting order.
         * @param {AuctionConfirmPutOffBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionConfirmPutOffPost(body: AuctionConfirmPutOffBody, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20058>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketTypeAuctionConfirmPutOffPost(body, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Confirm listing order.
         * @param {AuctionConfirmPutOnBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionConfirmPutOnPost(body: AuctionConfirmPutOnBody, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20028>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketTypeAuctionConfirmPutOnPost(body, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create purchase order.
         * @param {AuctionCreateBidBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionCreateBidPost(body: AuctionCreateBidBody, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20055>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketTypeAuctionCreateBidPost(body, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create the order for price adjustment.
         * @param {AuctionCreateModifyPriceBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionCreateModifyPricePost(body: AuctionCreateModifyPriceBody, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20059>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketTypeAuctionCreateModifyPricePost(body, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create delisting order.
         * @param {AuctionCreatePutOffBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionCreatePutOffPost(body: AuctionCreatePutOffBody, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20057>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketTypeAuctionCreatePutOffPost(body, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create listing order.
         * @param {AuctionCreatePutOnBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionCreatePutOnPost(body: AuctionCreatePutOnBody, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20054>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketTypeAuctionCreatePutOnPost(body, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve the list information of the market.
         * @param {AuctionListBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionListPost(body: AuctionListBody, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20052>>> {
            const localVarAxiosArgs = await MarketPlaceApiAxiosParamCreator(configuration).v3MarketTypeAuctionListPost(body, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MarketPlaceApi - factory interface
 * @export
 */
export const MarketPlaceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Bind btcAddress and nftAddress.
         * @param {AuctionBindBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketBrc20AuctionBindPost(body: AuctionBindBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20028>> {
            return MarketPlaceApiFp(configuration).v3MarketBrc20AuctionBindPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tick k line.
         * @param {AuctionBrc20KlineBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketBrc20AuctionBrc20KlinePost(body: AuctionBrc20KlineBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20049>> {
            return MarketPlaceApiFp(configuration).v3MarketBrc20AuctionBrc20KlinePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get statistical data, price, market capitalization, etc. for BRC20.
         * @param {AuctionBrc20TypesBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketBrc20AuctionBrc20TypesPost(body?: AuctionBrc20TypesBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20050>> {
            return MarketPlaceApiFp(configuration).v3MarketBrc20AuctionBrc20TypesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get statistical data, price, market capitalization, etc. for BRC20.
         * @param {AuctionBrc20TypesSpecifiedBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketBrc20AuctionBrc20TypesSpecifiedPost(body?: AuctionBrc20TypesSpecifiedBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20051>> {
            return MarketPlaceApiFp(configuration).v3MarketBrc20AuctionBrc20TypesSpecifiedPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get information on listings, delistings, and sales.
         * @param {AuctionActionsBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionActionsPost(body: AuctionActionsBody, type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20053>> {
            return MarketPlaceApiFp(configuration).v3MarketTypeAuctionActionsPost(body, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm purchase order.
         * @param {AuctionConfirmBidBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionConfirmBidPost(body: AuctionConfirmBidBody, type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20056>> {
            return MarketPlaceApiFp(configuration).v3MarketTypeAuctionConfirmBidPost(body, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm the order for price adjustment.
         * @param {AuctionConfirmModifyPriceBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionConfirmModifyPricePost(body: AuctionConfirmModifyPriceBody, type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20028>> {
            return MarketPlaceApiFp(configuration).v3MarketTypeAuctionConfirmModifyPricePost(body, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm delisting order.
         * @param {AuctionConfirmPutOffBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionConfirmPutOffPost(body: AuctionConfirmPutOffBody, type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20058>> {
            return MarketPlaceApiFp(configuration).v3MarketTypeAuctionConfirmPutOffPost(body, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm listing order.
         * @param {AuctionConfirmPutOnBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionConfirmPutOnPost(body: AuctionConfirmPutOnBody, type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20028>> {
            return MarketPlaceApiFp(configuration).v3MarketTypeAuctionConfirmPutOnPost(body, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create purchase order.
         * @param {AuctionCreateBidBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionCreateBidPost(body: AuctionCreateBidBody, type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20055>> {
            return MarketPlaceApiFp(configuration).v3MarketTypeAuctionCreateBidPost(body, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create the order for price adjustment.
         * @param {AuctionCreateModifyPriceBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionCreateModifyPricePost(body: AuctionCreateModifyPriceBody, type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20059>> {
            return MarketPlaceApiFp(configuration).v3MarketTypeAuctionCreateModifyPricePost(body, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create delisting order.
         * @param {AuctionCreatePutOffBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionCreatePutOffPost(body: AuctionCreatePutOffBody, type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20057>> {
            return MarketPlaceApiFp(configuration).v3MarketTypeAuctionCreatePutOffPost(body, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create listing order.
         * @param {AuctionCreatePutOnBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionCreatePutOnPost(body: AuctionCreatePutOnBody, type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20054>> {
            return MarketPlaceApiFp(configuration).v3MarketTypeAuctionCreatePutOnPost(body, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the list information of the market.
         * @param {AuctionListBody} body 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v3MarketTypeAuctionListPost(body: AuctionListBody, type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20052>> {
            return MarketPlaceApiFp(configuration).v3MarketTypeAuctionListPost(body, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketPlaceApi - object-oriented interface
 * @export
 * @class MarketPlaceApi
 * @extends {BaseAPI}
 */
export class MarketPlaceApi extends BaseAPI {
    /**
     * 
     * @summary Bind btcAddress and nftAddress.
     * @param {AuctionBindBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketBrc20AuctionBindPost(body: AuctionBindBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20028>> {
        return MarketPlaceApiFp(this.configuration).v3MarketBrc20AuctionBindPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get tick k line.
     * @param {AuctionBrc20KlineBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketBrc20AuctionBrc20KlinePost(body: AuctionBrc20KlineBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20049>> {
        return MarketPlaceApiFp(this.configuration).v3MarketBrc20AuctionBrc20KlinePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get statistical data, price, market capitalization, etc. for BRC20.
     * @param {AuctionBrc20TypesBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketBrc20AuctionBrc20TypesPost(body?: AuctionBrc20TypesBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20050>> {
        return MarketPlaceApiFp(this.configuration).v3MarketBrc20AuctionBrc20TypesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get statistical data, price, market capitalization, etc. for BRC20.
     * @param {AuctionBrc20TypesSpecifiedBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketBrc20AuctionBrc20TypesSpecifiedPost(body?: AuctionBrc20TypesSpecifiedBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20051>> {
        return MarketPlaceApiFp(this.configuration).v3MarketBrc20AuctionBrc20TypesSpecifiedPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get information on listings, delistings, and sales.
     * @param {AuctionActionsBody} body 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketTypeAuctionActionsPost(body: AuctionActionsBody, type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20053>> {
        return MarketPlaceApiFp(this.configuration).v3MarketTypeAuctionActionsPost(body, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Confirm purchase order.
     * @param {AuctionConfirmBidBody} body 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketTypeAuctionConfirmBidPost(body: AuctionConfirmBidBody, type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20056>> {
        return MarketPlaceApiFp(this.configuration).v3MarketTypeAuctionConfirmBidPost(body, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Confirm the order for price adjustment.
     * @param {AuctionConfirmModifyPriceBody} body 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketTypeAuctionConfirmModifyPricePost(body: AuctionConfirmModifyPriceBody, type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20028>> {
        return MarketPlaceApiFp(this.configuration).v3MarketTypeAuctionConfirmModifyPricePost(body, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Confirm delisting order.
     * @param {AuctionConfirmPutOffBody} body 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketTypeAuctionConfirmPutOffPost(body: AuctionConfirmPutOffBody, type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20058>> {
        return MarketPlaceApiFp(this.configuration).v3MarketTypeAuctionConfirmPutOffPost(body, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Confirm listing order.
     * @param {AuctionConfirmPutOnBody} body 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketTypeAuctionConfirmPutOnPost(body: AuctionConfirmPutOnBody, type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20028>> {
        return MarketPlaceApiFp(this.configuration).v3MarketTypeAuctionConfirmPutOnPost(body, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create purchase order.
     * @param {AuctionCreateBidBody} body 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketTypeAuctionCreateBidPost(body: AuctionCreateBidBody, type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20055>> {
        return MarketPlaceApiFp(this.configuration).v3MarketTypeAuctionCreateBidPost(body, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create the order for price adjustment.
     * @param {AuctionCreateModifyPriceBody} body 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketTypeAuctionCreateModifyPricePost(body: AuctionCreateModifyPriceBody, type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20059>> {
        return MarketPlaceApiFp(this.configuration).v3MarketTypeAuctionCreateModifyPricePost(body, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create delisting order.
     * @param {AuctionCreatePutOffBody} body 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketTypeAuctionCreatePutOffPost(body: AuctionCreatePutOffBody, type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20057>> {
        return MarketPlaceApiFp(this.configuration).v3MarketTypeAuctionCreatePutOffPost(body, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create listing order.
     * @param {AuctionCreatePutOnBody} body 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketTypeAuctionCreatePutOnPost(body: AuctionCreatePutOnBody, type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20054>> {
        return MarketPlaceApiFp(this.configuration).v3MarketTypeAuctionCreatePutOnPost(body, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieve the list information of the market.
     * @param {AuctionListBody} body 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketPlaceApi
     */
    public async v3MarketTypeAuctionListPost(body: AuctionListBody, type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20052>> {
        return MarketPlaceApiFp(this.configuration).v3MarketTypeAuctionListPost(body, type, options).then((request) => request(this.axios, this.basePath));
    }
}
